{"version":3,"sources":["History.js","data.js","calculations.js","App.js","reportWebVitals.js","index.js"],"names":["History","startAngle","endAngle","r","R","cx","cy","doubleArc","arc","x","y","start","end","this","makeSingleArc","dblArc","moveTo","slice","indexOf","arcPath","console","log","props","undefined","stroke","strokeLinecap","strokeWidth","d","makeArc","React","Component","DEGREES_IN_HALF_ARC","ANGLE_START","Math","PI","convertUnitsToDegrees","units","minUnits","maxUnits","abs","viewBox","split","viewBoxParams","minX","minY","width","height","parseInt","guages","minValue","maxValue","map","v","val","test","Fragment","style","fill","fontSize","JSON","stringify","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bec459a.chunk.js","sourcesContent":["import arc from 'svg-arc'\nimport React from 'react'\n\nclass History extends React.Component {\n\n  /**\n   * @param {*} startAngle \n   * @param {*} endAngle \n   * @param {*} r \n   * @param {*} R \n   * @param {*} viewBox \n   * @returns svg path d = \"M startX startY\" A radius radius, 0 largeArcFlag, sweepFlag, endX, endY\n   */\n  \n  makeArc(startAngle, endAngle, r, R, cx, cy) {\n\n    /** returns a double arc svg d value\n     * sample --  \"M -82.27 47.50 L -82.27 47.50 A 95 95 0 0 1 -93.56 16.50 L -93.56 16.50 A 95 95  0 0 0 -82.27 47.50 Z\"\n     */\n\n    const doubleArc = arc({\n      x: cx, // center of view box\n      y: cy,\n      R,\n      r,\n      start: startAngle,\n      end: endAngle\n    })\n\n    if (r === R) {\n      return  this.makeSingleArc(doubleArc)\n    } else {\n      return doubleArc\n    }\n  }\n\n  // need single arc to see round endcap shape\n  // below should be refactored into fork of npm svg-arc TODO\n  makeSingleArc (dblArc) {\n    const moveTo = dblArc.slice(0, dblArc.indexOf('L') - 1)\n    const arcPath = dblArc.slice(dblArc.indexOf('A'), dblArc.indexOf('L', dblArc.indexOf('A')) - 1)// 1st L after an A\n    console.log(moveTo, arcPath)\n    return `${moveTo} ${arcPath}`\n  }\n\n  render() {\n    console.log('rendering', this.props)\n    const {startAngle, endAngle, r, R, cx, cy} = this.props\n    if (startAngle === undefined || endAngle === undefined) {\n      return null\n    }\n\n    return (<>\n      <path stroke=\"#7BCFFE\" strokeLinecap=\"round\" strokeWidth={5.8} d={this.makeArc(startAngle, endAngle, r, R, cx, cy)}></path>\n      </>)\n      } // end render\n  } // end class History\n  \n  export default History\n","// CONSTANTS\n\n\n/** angle from top of gauge to min or max in degrees */\nexport const DEGREES_IN_HALF_ARC = 120;\n\n/** angle from the top clockwise to the minimum end stop in radians */\nconst ANGLE_START = -DEGREES_IN_HALF_ARC*Math.PI/180;\n\n/** angle from the top clockwise to the maximum end stop in radians */\nconst ANGLE_END  = DEGREES_IN_HALF_ARC*Math.PI/180;\n\nconst ANGLE_RANGE = ANGLE_END-ANGLE_START; // radians\n\nconst DISK_RADIUS = 332/2;\n\nconst GROOVE_RADIUS = 318/2;\n\nconst HISTORY_BAND_RADIUS      = GROOVE_RADIUS;","import { DEGREES_IN_HALF_ARC } from './data.js'\n\n/**         degrees                   amps\n *            0, 360                    5\n *              |                       |\n *              |                       |\n *             / \\                     / \\\n *            /   \\                   /   \\\n *       min 240  120 max           0       10\n * \n *  DEGREES_IN_HALF_ARC = 360 - 240 = 120\n *  degrees = amp * 24 + 240 (svg-arc takes modulo if over 360)\n */\n\nexport const convertUnitsToDegrees = function (units, minUnits, maxUnits) {\n  const displayedUnits = (units < minUnits) ? minUnits : units > maxUnits ? maxUnits : units\n  \n  const degToUnitRatio = DEGREES_IN_HALF_ARC * 2 / Math.abs(maxUnits - minUnits)\n  return (displayedUnits * degToUnitRatio) + 360 - DEGREES_IN_HALF_ARC\n}\n","import React from 'react';\nimport './App.css';\nimport History from './History';\nimport { convertUnitsToDegrees } from './calculations.js'\n\nconst viewBox = \"-110 -110 220 220\"\nconst [minX, minY, width, height ] = viewBox.split(' ')\nconst viewBoxParams = { minX, minY, width, height}\nconsole.log(viewBoxParams, parseInt(viewBoxParams.width, 10) + parseInt((2 * viewBoxParams.minX), 10))\nconst r = 100\nconst R = 100\n\n\n\nconst amps = [\n  {\n    minValue: 0,\n    maxValue: 1,\n  },\n  {\n    minValue: 9,\n    maxValue: 10,\n  },\n  {\n    minValue: 0,\n    maxValue: 10,\n  },\n  {\n    minValue: -2,\n    maxValue: 14,\n  },\n  {\n    minValue: 4,\n    maxValue: 6,\n  },\n  {\n    minValue: 2,\n    maxValue: 7,\n  },\n  {\n    minValue: 2,\n    maxValue: 5,\n  },\n]\n\nconst angles = amps.map(v => {\n  return {\n    startAngle: convertUnitsToDegrees(v.minValue, 0, 10),\n    endAngle: convertUnitsToDegrees(v.maxValue, 0, 10),\n  }\n})\n\nconst tests = angles.map((val) => {\n  return {\n    ...val,\n    r: r * .95,\n    R: R * .95,\n    cx: parseInt(viewBoxParams.width) + parseInt((2 * viewBoxParams.minX), 10),\n    cy: parseInt(viewBoxParams.height) + parseInt((2 * viewBoxParams.minY), 10),\n    viewBox,\n  }\n})\n\n\nconst guages = tests.map(test => {\n  return (\n    <React.Fragment key={JSON.stringify(test)}>\n        <svg style={{height: \"400px\"}} viewBox={test.viewBox} fill=\"#22222\">\n        <circle cx={0} cy={0} r={100} fill=\"black\"/>\n          < History {...test} />\n          <text fontSize=\"smaller\" x=\"-100\" y=\"90\" fill=\"#7BCFFE\">{`Low: ${test.startAngle} High: ${test.endAngle}`}</text>\n        </svg>\n      </React.Fragment>\n  )\n})\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {guages}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}